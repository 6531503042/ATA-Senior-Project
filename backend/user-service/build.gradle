plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'dev.bengi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
	
repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.5")
}

dependencies {

	//Main dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// Web Flux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//Model mapper
	implementation 'org.modelmapper:modelmapper:3.2.2'

    //Eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	//Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.projectreactor.kafka:reactor-kafka:1.3.23'
	implementation 'org.apache.kafka:kafka-clients:3.9.0'

	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//Jakarta Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.eclipse.angus:jakarta.mail:2.0.2'

	//Gson
	implementation 'com.google.code.gson:gson:2.11.0'

	// OpenAPI 3.0 Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'io.springfox:springfox-swagger2:3.0.0'

	//Database
	runtimeOnly 'org.postgresql:postgresql'

	//Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring Security
	implementation 'org.springframework.security:spring-security-config'
	implementation 'org.springframework.security:spring-security-web'
}

tasks.named('test') {
	useJUnitPlatform()
}

configurations.configureEach {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// Optional: Disable version compatibility check if needed
ext['spring.cloud.compatibility.verifier.enabled'] = false


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
