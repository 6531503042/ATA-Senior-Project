version: '3.8'

services:
  # Discovery Service (Eureka)
  discovery-service:
    build: 
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8087:8087"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 60s
      timeout: 30s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # User Service
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feedback Service
  feedback-service:
    build: 
      context: ./feedback-service
      dockerfile: Dockerfile
    container_name: feedback-service
    ports:
      - "8084:8084"
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/feedbackdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feedback Scoring Service (Python)
  feedback-scoring:
    build: 
      context: ./feedback-scoring-service
      dockerfile: Dockerfile
    container_name: feedback-scoring-service
    restart: always
    ports:
      - "8086:8086"
    environment:
      - MONGODB_URI=mongodb://feedback-mongodb:27017/feedback
    volumes:
      - feedback-model-cache:/app/models
    depends_on:
      feedback-mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # MongoDB for Feedback Scoring Service
  feedback-mongodb:
    image: mongo:latest
    container_name: feedback-mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - feedback-mongodb-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # PostgreSQL Database
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=userdb,feedbackdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

networks:
  microservices-network:
    driver: bridge

volumes:
  feedback-model-cache:
  feedback-mongodb-data:
  postgres-data: 