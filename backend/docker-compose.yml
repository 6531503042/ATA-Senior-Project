version: '3.8'

services:
  # Service Discovery (Eureka)
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8087
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_CLIENT_REGISTERWITHEUREKA=false
      - EUREKA_CLIENT_FETCHREGISTRY=false
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8087/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - hr-network

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/user_service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - hr-network

  # Feedback Service
  feedback-service:
    build:
      context: ./feedback-service
      dockerfile: Dockerfile
    container_name: feedback-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8084
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/feedback_service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - USER_SERVICE_URL=http://user-service:8081
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    depends_on:
      discovery-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - hr-network


  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hr-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hr-network

networks:
  hr-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: 