services:
  # Service Discovery (Eureka)
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8087
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_CLIENT_REGISTERWITHEUREKA=false
      - EUREKA_CLIENT_FETCHREGISTRY=false
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8087/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - hr-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hr-network

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/user_service
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=postgres
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres:5432/user_service
      - SPRING_FLYWAY_USER=postgres
      - SPRING_FLYWAY_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    networks:
      - hr-network

  # Feedback Service
  feedback-service:
    build:
      context: ./feedback-service
      dockerfile: Dockerfile
    container_name: feedback-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8084
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/feedback_service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8087/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - USER_SERVICE_URL=http://user-service:8081
      - JAVA_OPTS=-XX:+UseContainerSupport -Xmx512m
    depends_on:
      discovery-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - hr-network

networks:
  hr-network:
    driver: bridge

volumes:
  postgres_data:
